

#include "alt_types.h"
#include <stdio.h>
//#include <inttypes.h>
//#include <unistd.h>
//#include "system.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h"

void inc_green_leds() {
    static unsigned cur = 0;
    IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_PIO_BASE, cur++);
}
void button_interrupt_handler(void *context, alt_u32 id) {
    volatile int *ret = (volatile int*) context;
    *ret = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
  
    /* 
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
}

void init_button_interrupts(volatile int *ret) {
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);

    alt_irq_register(BUTTON_PIO_IRQ, (void*) ret, 
                     button_interrupt_handler);
}

volatile static int timer_counter = 0;
void timer_interrupt_handler(void *context, alt_u32 id) {
  printf("Testing %d\n", timer_counter);
  fflush(stdout);
    (*(volatile int*) context)--;
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(TIMER_0_BASE);
  /* Reset the Button's edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TIMER_0_BASE, 0);
  
  IORD_ALTERA_AVALON_PIO_EDGE_CAP(TIMER_0_BASE);
}

void wait(int ms_to_wait) {
    volatile int timer_counter = ms_to_wait;
    while (timer_counter) {}
}

void wait_init() {
    // turn on timer interrupt handler
    //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TIMER_0_BASE, 0xf);
      /* Enable all 4 button interrupts. */
      IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TIMER_0_BASE, 0xf);
      /* Reset the edge capture register. */
      IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TIMER_0_BASE, 0x0);
        
        alt_irq_register(TIMER_0_IRQ, &timer_counter, timer_interrupt_handler);
    // timer fires an event every 1ms
    
    //while (i > 0) { printf("While testing %d\n", i);};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    // disable timer interrupts again
    //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TIMER_0_BASE, 0x0);
}

int main(void) {
    //volatile alt_16 led = 0x00;
    printf("Main start()\n");
    fflush(stdout);
    //volatile int button_edge_value = 0;
    //init_button_interrupts(&button_edge_value);
    int i = 1;
    wait_init();
    printf("Inited wait\n");
    fflush(stdout);
    
    while (1) {
        //while (button_edge_value == 0);
        //button_edge_value = 0;
        IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, i++);
        wait(1000);
        //volatile int sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_PIO_BASE);
        //IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_PIO_BASE, sw);
    }
    return 0;
}
